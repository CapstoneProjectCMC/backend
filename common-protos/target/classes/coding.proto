syntax = "proto3";

package coding;
option java_multiple_files = true;
option java_package = "com.codecampus.coding.grpc";
option java_outer_classname = "CodingProto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message CodingExerciseDto {
  string id = 1;
  string title = 2;
  string description = 3;
}

message CodingDetailDto {
  string exerciseId = 1; // = id của exercise
  repeated string allowedLanguages = 2;
  string input = 3;
  string output = 4;
  int32  timeLimit = 5;
  int32  memoryLimit = 6;
  int32  maxSubmissions = 7;
  string topic = 8;
  string constraintText = 9;
  string codeTemplate = 10;
  string solution = 11;
  repeated TestCaseDto testcases = 12;
}

message TestCaseDto {
  string id = 1;
  string exerciseId = 2;
  string input = 3;
  string expectedOutput = 4;
  bool sample = 5;
  string note = 6;
}

message SoftDeleteRequest {
  string id = 1;
}

message SoftDeleteTestCaseRequest {
  string exerciseId = 1;
  string testCaseId = 2;
}

message SubmitCodeRequest {
  string submissionId = 1;   // UUID tạo sẵn ở FE hoặc coding-svc
  string exerciseId = 2;
  string studentId = 3;
  string language = 4;
  string sourceCode = 5;
  int32 memoryMb = 6;
  float cpus = 7;
  int32 timeTakenSeconds = 8;
}

message TestCaseResultDto {
  string testCaseId = 1;
  bool passed = 2;
  int32 runtimeMs = 3;
  int32 memoryKb = 4;
  string output = 5;
  string errorMessage = 6;
}

message SubmitCodeResponse {
  string submissionId = 1;
  int32 score = 2;
  int32 totalPoints = 3;
  bool passed = 4;
  repeated TestCaseResultDto results = 5;
}

service CodingSyncService {
  rpc CreateCodingExercise(CreateCodingExerciseRequest)
      returns (google.protobuf.Empty);
  rpc AddCodingDetail(AddCodingDetailRequest)
      returns (google.protobuf.Empty);
  rpc AddTestCase(AddTestCaseRequest)
      returns (google.protobuf.Empty);
  rpc SoftDeleteExercise (SoftDeleteRequest)
      returns (google.protobuf.Empty);
  rpc SoftDeleteTestCase (SoftDeleteTestCaseRequest)
      returns (google.protobuf.Empty);
}

service CodingPlayService {
  rpc SubmitCode(SubmitCodeRequest)
      returns (SubmitCodeResponse);
}

message CreateCodingExerciseRequest {
  CodingExerciseDto exercise = 1;
}

message AddCodingDetailRequest {
  string exerciseId = 1;
  CodingDetailDto codingDetail = 2;
}

message AddTestCaseRequest {
  string exerciseId = 1;
  TestCaseDto testCase = 2;
}

