name: codecampus-infrastructures

services:
  # ---------- PostgreSQL ----------
  postgres:
    image: bitnamilegacy/postgresql:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      # Superuser duy nhất cho cluster
      - POSTGRESQL_POSTGRES_PASSWORD=${PG_SUPER_PASSWORD}
      - POSTGRESQL_PASSWORD=${PG_SUPER_PASSWORD}

      # Khai báo biến cho các app (script init sẽ đọc để tạo role/database)
      - IDENTITY_USERNAME=${IDENTITY_USERNAME}
      - IDENTITY_DB_PASSWORD=${IDENTITY_DB_PASSWORD}
      - IDENTITY_DATABASE=${IDENTITY_DATABASE}

      - QUIZ_USERNAME=${QUIZ_USERNAME}
      - QUIZ_DB_PASSWORD=${QUIZ_DB_PASSWORD}
      - QUIZ_DATABASE=${QUIZ_DATABASE}

      - SUBMISSION_USERNAME=${SUBMISSION_USERNAME}
      - SUBMISSION_DB_PASSWORD=${SUBMISSION_DB_PASSWORD}
      - SUBMISSION_DATABASE=${SUBMISSION_DATABASE}

      - CODING_USERNAME=${CODING_USERNAME}
      - CODING_DB_PASSWORD=${CODING_DB_PASSWORD}
      - CODING_DATABASE=${CODING_DATABASE}

      - AI_USERNAME=${AI_USERNAME}
      - AI_DB_PASSWORD=${AI_DB_PASSWORD}
      - AI_DATABASE=${AI_DATABASE}

      - POST_USERNAME=${POST_USERNAME}
      - POST_DB_PASSWORD=${POST_DB_PASSWORD}
      - POST_DATABASE=${POST_DATABASE}

      - PAYMENT_USERNAME=${PAYMENT_USERNAME}
      - PAYMENT_DB_PASSWORD=${PAYMENT_DB_PASSWORD}
      - PAYMENT_DATABASE=${PAYMENT_DATABASE}

      - ORGANIZATION_USERNAME=${ORGANIZATION_USERNAME}
      - ORGANIZATION_DB_PASSWORD=${ORGANIZATION_DB_PASSWORD}
      - ORGANIZATION_DATABASE=${ORGANIZATION_DATABASE}
    ports:
      - "5431:5432"
      - "5433:5432"
      - "5434:5432"
      - "5435:5432"
      - "5436:5432"
      - "5439:5432"
      - "5440:5432"
      - "5441:5432"
    volumes:
      - pg_data:/bitnami/postgresql
      # Mount thư mục init để tạo các DB/user tương ứng
      - ./init/postgres:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - identity-db
          - quiz-db
          - submission-db
          - coding-db
          - ai-db
          - post-db
          - payment-db
          - organization-db

  # ----------  Kafka  ----------
  kafka:
    image: bitnamilegacy/kafka:latest
    container_name: kafka
    restart: unless-stopped
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # ------ Listeners ------
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    volumes:
      - kafka_data:/bitnami/kafka
    networks: [ backend ]
  
  # ---------- Neo4j ----------
  neo4j:
    image: bitnamilegacy/neo4j:latest
    container_name: neo4j
    restart: unless-stopped
    environment:
      - NEO4J_DAEMON_USER=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - INIT_NEO4J_PASSWORD=${NEO4J_PASSWORD}
      # Mở cổng Bolt & HTTP
      - NEO4J_BOLT_PORT_NUMBER=7687
      - NEO4J_HTTP_PORT_NUMBER=7474
      # Lắng nghe trên mọi IP
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    ports:
      - "7687:7687"
      - "7474:7474"
    volumes:
      - neo4j_data:/bitnami/neo4j
    healthcheck:
      test: [ "CMD-SHELL", "cypher-shell -u neo4j -p $${NEO4J_PASSWORD} 'RETURN 1' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ backend ]

  # ---------- Redis ----------
  redis:
    image: bitnamilegacy/redis:latest
    container_name: redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_AOF_ENABLED=yes          # bật AOF để an toàn dữ liệu
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/bitnami/redis/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ backend ]

  # ---------- MinIO ----------
  minio:
    image: bitnamilegacy/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    #      - MINIO_SERVER_URL=http://localhost:9000
    command: server /bitnami/minio/data --console-address ":9001"
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console UI
    volumes:
      - minio_data:/bitnami/minio/data
    healthcheck:
      test: [ "CMD", "bash", "-c", "mc alias set minio http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && mc ls minio" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [ backend ]

  minio-init:
    image: minio/mc                        # MinIO Client
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    entrypoint: |
      /bin/sh -c "
        set -e                                # dừng ngay khi có lỗi
        # đợi MinIO lên
        until mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} >/dev/null 2>&1; do
          echo '⌛ Waiting for MinIO…'
          sleep 3
        done
        mc mb --ignore-existing minio/codecampus2025
        mc anonymous set download minio/codecampus2025
        echo '✅ Bucket ready!'
      "
    networks: [ backend ]

  # ---------- Elasticsearch ----------
  elasticsearch:
    image: bitnamilegacy/elasticsearch:8.7.0
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_NODE_NAME=elastic-node-1
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=-Xms1g -Xmx1g                   # điều chỉnh RAM tùy máy
      # Cấu hình single‑node để chạy dễ dàng
      - discovery.type=single-node
      - ELASTICSEARCH_PLUGINS=analysis-icu
      - BITNAMI_DEBUG=true
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/bitnami/elasticsearch/data
    healthcheck:
      test: [ "CMD", "bash", "-c", "curl -s -u $${ELASTIC_USERNAME}:$${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [ backend ]


  #  # ---------- Kibana ----------
  #  kibana:
  #    image: bitnami/kibana:8.7.0
  #    container_name: kibana
  #    restart: unless-stopped
  #    environment:
  #      - KIBANA_ELASTICSEARCH_URL=http://elasticsearch:9200
  #      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
  #    ports:
  #      - "5601:5601"
  #    depends_on:
  #      elasticsearch:
  #        condition: service_healthy
  #    networks: [ backend ]

  # ---------- MongoDB ----------
  mongo:
    image: bitnamilegacy/mongodb:latest
    container_name: mongo
    restart: unless-stopped
    environment:
      - MONGODB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}

      # Biến cho từng app (script init sẽ dùng)
      - FILE_USERNAME=${FILE_USERNAME}
      - FILE_PASSWORD=${FILE_PASSWORD}
      - FILE_DATABASE=${FILE_DATABASE}

      - NOTIFICATION_USERNAME=${NOTIFICATION_USERNAME}
      - NOTIFICATION_PASSWORD=${NOTIFICATION_PASSWORD}
      - NOTIFICATION_DATABASE=${NOTIFICATION_DATABASE}

      - CHAT_USERNAME=${CHAT_USERNAME}
      - CHAT_PASSWORD=${CHAT_PASSWORD}
      - CHAT_DATABASE=${CHAT_DATABASE}
    ports:
      - "27017:27017"
      - "27018:27017"
      - "27019:27017"
    volumes:
      - mongo_data:/bitnami/mongodb
      - ./init/mongo:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "mongo admin -u root -p $${MONGODB_ROOT_PASSWORD} --eval 'db.adminCommand(\"ping\")' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - file-db
          - notification-db
          - chat-db

  #  # ---------- Monitoring: Metrics (Prometheus/Grafana) ----------
  #  prometheus:
  #    image: bitnami/prometheus:latest
  #    container_name: prometheus
  #    restart: unless-stopped
  #    ports: [ "5555:9090" ]
  #    volumes:
  #      - prometheus_data:/opt/bitnami/prometheus/data
  #      - ./monitoring/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml:ro
  #    networks: [ backend ]
  #
  #  grafana:
  #    image: bitnami/grafana:latest
  #    container_name: grafana
  #    restart: unless-stopped
  #    ports: [ "5556:3000" ]
  #    environment:
  #      - GF_SECURITY_ADMIN_USER=admin
  #      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
  #    volumes:
  #      - grafana_data:/opt/bitnami/grafana/data
  #      # Tự động thêm data source Prometheus & Loki
  #      - ./monitoring/grafana/provisioning:/opt/bitnami/grafana/conf/provisioning
  #    depends_on:
  #      - prometheus
  #      - loki
  #    networks: [ backend ]

  #  # Exporter lấy metrics host & container
  #  node-exporter:
  #    image: bitnami/node-exporter:latest
  #    container_name: node-exporter
  #    restart: unless-stopped
  #    command:
  #      - --path.rootfs=/host
  #      - --path.sysfs=/host/sys
  #      - --path.procfs=/host/proc
  #      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
  #    volumes:
  #      - /:/host:ro
  #      - /proc:/host/proc:ro
  #      - /sys:/host/sys:ro
  #    ports: [ "5557:9100" ]
  #    networks: [ backend ]
  #
  #  cadvisor:
  #    image: bitnami/cadvisor:latest
  #    container_name: cadvisor
  #    restart: unless-stopped
  #    ports: [ "5558:8080" ]
  #    volumes:
  #      - /:/rootfs:ro
  #      - /var/run:/var/run:ro
  #      - /sys:/sys:ro
  #      - /var/lib/docker/:/var/lib/docker:ro
  #    networks: [ backend ]
  #    user: "0:0"
  #    privileged: true
  #    devices:
  #      - /dev/kmsg
  #
  #  # ---------- Monitoring: Logs (Loki/Promtail) ----------
  #  loki:
  #    image: grafana/loki:3.4.1
  #    container_name: loki
  #    restart: unless-stopped
  #    command: -config.file=/etc/loki/config.yml
  #    ports: [ "5559:3100" ]
  #    volumes:
  #      - ./monitoring/loki-config.yml:/etc/loki/config.yml:ro
  #      - loki_data:/loki
  #    networks: [ backend ]
  #
  #  promtail:
  #    image: grafana/promtail:3.4.1
  #    container_name: promtail
  #    restart: unless-stopped
  #    command: -config.file=/etc/promtail/config.yml
  #    volumes:
  #      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
  #      - /var/log:/var/log:ro
  #      - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #      - /var/run/docker.sock:/var/run/docker.sock:ro
  #    networks: [ backend ]

networks:
  backend:
    name: codecampus_backend

volumes:
  #  prometheus_data:
  #  grafana_data:
  #  loki_data:
  #  organization_pg_data:
  #  payment_pg_data:
  #  identity_pg_data:
  #  submission_pg_data:
  #  quiz_pg_data:
  #  coding_pg_data:
  #  ai_pg_data:
  #  post_pg_data:
  kafka_data:
  neo4j_data:
  redis_data:
  minio_data:
  elasticsearch_data:
  #  file_mongo_data:
  #  notification_mongo_data:
  #  chat_mongo_data:
  pg_data:
  mongo_data:

