name: codecampus

services:
  # ---------- PostgreSQL ----------
  postgresql:
    image: bitnami/postgresql:latest
    container_name: postgresql
    restart: unless-stopped
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=dinhanst2832004
      - POSTGRESQL_DATABASE=identity_db
      - POSTGRESQL_POSTGRES_PASSWORD=dinhanst2832004
    ports: ["5431:5432"] # host:container
    volumes:
      - pg_data:/bitnami/postgresql # dữ liệu bền vững
      - ./backups/postgres:/backups # bind-mount ra host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ## Khi container khởi động lần đầu và CSDL trống,
    ## nếu có file /backups/identity_db.latest.dump thì tải vào luôn.
    command:
      - /bin/bash
      - -ceu
      - |
        DUMP=/backups/identity_db.latest.dump
        # Thư mục data rỗng (<3 file) ⇒ coi như chưa khởi tạo
        if [ "$(ls -A /bitnami/postgresql/data | wc -l)" -lt 3 ] && [ -f "$DUMP" ]; then
          echo "[postgresql] Restoring from $DUMP"
          /opt/bitnami/scripts/postgresql/run.sh &      # bật Postgres nền
          PG_PID=$!
          sleep 10                                      # chờ PostgreSQL ready
          pg_restore -U postgres -d identity_db --clean "$DUMP"
          kill "$PG_PID"
          echo "[postgresql] Restore finished"
        fi
        exec /opt/bitnami/scripts/postgresql/run.sh 

  pg_backup:
    image: postgres:16-alpine
    depends_on: [postgresql]
    restart: unless-stopped
    environment: {PGPASSWORD=dinhanst2832004}
    volumes:
      - ./backups/postgres:/backups
    entrypoint: >
      /bin/sh -c '
        while true; do
          echo "[pg_backup] $(date) pg_dump running";
          pg_dump -h postgresql -U postgres -F c identity_db \
            -f /backups/identity_db.latest.dump;
          sleep 3600;
        done
      '

  # ---------- Neo4j ----------
  neo4j:
    image: bitnami/neo4j
    container_name: neo4j
    restart: unless-stopped
    environment:
      - NEO4J_DAEMON_USER=neo4j
      - NEO4J_PASSWORD=dinhanst2832004
      - INIT_NEO4J_PASSWORD=dinhanst2832004
      - NEO4J_BOLT_PORT_NUMBER=7687 # cổng trong container

      # Mở REST UI
      - NEO4J_HTTP_PORT_NUMBER=7474

      # ---- Lắng nghe trên mọi IP ----
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474

      # ---- Quảng bá (client sẽ thấy) ----
      - NEO4J_dbms_connector_bolt_advertised__address=localhost:7687
      - NEO4J_dbms_connector_http_advertised__address=localhost:7474
    ports:
      - "7687:7687"
      - "7474:7474"
    volumes:
      - neo4j_data:/bitnami/neo4j # dữ liệu bền vững
      - ./backups/neo4j:/backups # bind-mount ra host
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p $${NEO4J_PASSWORD} 'RETURN 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j_restore:
    image: alpine:3.20
    depends_on: [ neo4j ]
    volumes:
      - neo4j_data:/data
      - ./backups/neo4j:/backups
    # Nếu dữ liệu trống và có backup tgz thì giải nén
    entrypoint: >
      /bin/sh -c '
        DB_DIR=/data/data/databases/neo4j;
        if [ ! -d "$DB_DIR" ] && [ -f /backups/neo4j.latest.tgz ]; then
          echo "[restore] Detected empty DB, restoring...";
          mkdir -p "$(dirname "$DB_DIR")";
          tar xzf /backups/neo4j.latest.tgz -C /data/data/databases;
        fi
      '
    restart: "no"

  neo4j_backup:
    image: alpine:3.20
    depends_on: [neo4j]
    restart: unless-stopped
    volumes:
      - neo4j_data:/data
      - ./backups/neo4j:/backups
    command: >
      /bin/sh -c '
        while true; do
          echo "[neo4j_backup] $(date) making tar";
          tar czf /backups/neo4j.latest.tgz -C /data . ;
          sleep 3600;
        done
      '

volumes:
  pg_data:
  neo4j_data: